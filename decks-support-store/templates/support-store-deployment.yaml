{{- if eq .Values.global.platform "VMware"}}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: decks-support-store-pvc-0
  namespace: {{.Release.Namespace}}
  labels:
    app: decks-support-store
    release: {{.Release.Name}}
  annotations:
    "helm.sh/hook": "pre-install"
spec:
  {{- if or .Values.global.storageClassName .Values.persistentVolume.storageClassName}}
  storageClassName: {{ default .Values.global.storageClassName .Values.persistentVolume.storageClassName}}
  {{- end}}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ default "200Gi" .Values.persistentVolume.size }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: decks-support-store
  namespace: {{.Release.Namespace}}
  labels:
    io.kompose.service: decks-support-store
    app.kubernetes.io/name: decks
    release: {{.Release.Name}}
    name: decks
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: decks-support-store
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: decks-support-store
{{ include "common-lib.labels-sp-integrated-all" . | indent 8}}
      annotations:
{{ include "common-lib.vsphere-emm-integrated_annotation" . | indent 8}}
    spec:
      {{- if .Values.global.registrySecret }}
      imagePullSecrets:
        - name: {{ .Values.global.registrySecret }}
      {{- end }}
      containers:
      - name: decks-support-store
        env:
        {{- if .Values.global.registrySecret }}
        - name: REGISTRY_SECRET
          value: {{ .Values.global.registrySecret }}
        {{- end }}
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: password
        - name: SALT
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: salt
        image: {{ .Values.global.registry }}/{{.Values.image.repository}}:{{default .Values.tag .Values.image.tag}}
        imagePullPolicy: {{ default .Values.pullPolicy .Values.image.pullPolicy }}
        command: ["/usr/local/bin/run-nginx.sh"]
        ports:
        - containerPort: {{ .Values.containerPort }}
        resources: {}
        securityContext:
          fsGroup: 100
          runAsGroup: 100
          runAsUser: 1000
        volumeMounts:
        - name: decks-support-store-claim0
          mountPath: /opt/secure/data
      restartPolicy: Always
      volumes:
      - name: decks-support-store-claim0
        persistentVolumeClaim:
          claimName: decks-support-store-pvc-0
{{- end}}
