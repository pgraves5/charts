---
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-portal
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name}}
    operator: objectscale-operator
    product: objectscale
data:
  upstream.conf: |
    upstream graphql {
        server {{ .Values.graphql.serviceName }}:{{ .Values.graphql.port }};
    }
  nginx.conf: |
    events {
        worker_connections  4096;  ## Default: 1024
    }

    http {
        proxy_cache_path  /var/cache/nginx/grafana_auth_cache/ keys_zone=grafana_auth_cache:1m inactive=15m;

        include /etc/nginx/mime.types;
        include /conf/upstream.conf;
        map $request_method $decksname {
         default {{ .Values.decks.supportStore.service.name }}.{{.Release.Namespace }}.svc.cluster.local;
        }
        map $request_method $decksport {
         default {{ .Values.decks.supportStore.service.port }};
        }

        map $request_method $fedsvcname {
         default {{ .Values.fedsvc.serviceName }}.{{.Release.Namespace }}.svc.cluster.local;
        }
        map $request_method $fedsvcport {
         default {{ .Values.fedsvc.port }};
        }

        # map to support authorized but not added into grafana users (they will be logged as 'root')
        map $grafana_user $grafana_user_updated {
         "emcmonitor" "emcmonitor";
         "emcservice" "emcservice";
         default      "root";
        }

        server {
            {{- if (eq .Values.global.platform "OpenShift") }}
            resolver {{ default "dns-default.openshift-dns.svc.cluster.local" .Values.global.dns}};
            {{- else }}
            resolver {{ default "kube-dns.kube-system.svc.cluster.local" .Values.global.dns}};
            {{- end }}
            listen       4443;
            server_name  localhost;
            access_log /dev/stdout;
            error_log /dev/stdout;
            rewrite_log on;
            ssl on;
            ssl_protocols        TLSv1.2;
            ssl_ciphers          AES:!ADH;
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            {{- if (eq .Values.global.platform "VMware") }}
            location /wcp/login {
                proxy_pass_request_headers on;
                proxy_pass_request_body on;
                proxy_pass https://kube-apiserver-authproxy-svc.kube-system.svc.cluster.local:8443/wcp/login;
            }
            location /rest/saml-hook {
                proxy_pass_request_headers on;
                proxy_pass_request_body on;
                proxy_pass https://kube-apiserver-authproxy-svc.kube-system.svc.cluster.local:8443/wcp/vsphere-ui-saml-hook;
            }
            {{- end }}
            location /graphql {
                proxy_pass http://graphql;
            }
            location /data {
                proxy_pass https://$decksname:$decksport;
            }

            location ~* /grafana/[a-z0-9]([-a-z0-9]*[a-z0-9])?/[a-z0-9]([-a-z0-9]*[a-z0-9])?/logout_grafana {
                # grafana redirects to this endpoint after logout

                # subrequest for token invalidation
                # auth response 200: user was logged out
                # auth response 401: token is already invalid
                auth_request /invalidate_token_for_grafana;
                error_page 401 @logout_grafana;
                # workaround to redirect to @logout_grafana after response 200
                try_files false @logout_grafana;
            }

            location ~* /grafana/[a-z0-9]([-a-z0-9]*[a-z0-9])?/[a-z0-9]([-a-z0-9]*[a-z0-9])? {
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+)/(.*) /$3 break;
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+) / break;

                # do auth request
                auth_request /validate_token_for_grafana;
                error_page 401 @grafana_auth_err;
                # after auth request take user name from header X-SDS-AUTH-USERNAME
                auth_request_set $grafana_user $upstream_http_x_sds_auth_username;
                # set header which is required for grafana access
                # value comes from $grafana_user variable thru the map defined at the top
                proxy_set_header X-WEBAUTH-USER $grafana_user_updated;
                # clear header which is used for basic auth
                proxy_set_header Authorization "";
                proxy_pass http://$2-grafana.$1.svc.cluster.local:3000;
            }

            location @grafana_auth_err {
                absolute_redirect off;
                return 302 /?action=logoff;
            }

            location /validate_token_for_grafana {
                internal;
                # override global setting
                proxy_buffering on;
                proxy_cache grafana_auth_cache;
                proxy_cache_key "$cookie_osauthtoken";
                # for now we set expiration time to 5m, later may be changed to use value from authsvc response header
                proxy_cache_valid 5m;
                # cut all redundant headers excluding those which are set in this location
                proxy_pass_request_headers off;
                proxy_pass_request_body off;
                # take token value from cookie with name OSAuthToken and set it as header
                proxy_set_header X-SDS-AUTH-TOKEN $cookie_osauthtoken;
                proxy_set_header X-ALLOW-ROLES "SYSTEM_ADMIN,SYSTEM_MONITOR";
                proxy_set_header Content-Length "";
                proxy_pass http://$fedsvcname:$fedsvcport/mgmt/validateToken;
            }

            location /invalidate_token_for_grafana {
                internal;
                # override global setting
                proxy_buffering on;
                # cut all redundant headers excluding those which are set in this location
                proxy_pass_request_headers off;
                proxy_pass_request_body off;
                # take token value from cookie with name OSAuthToken and set it as header
                proxy_set_header X-SDS-AUTH-TOKEN $cookie_osauthtoken;
                proxy_set_header Content-Length "";
                proxy_pass http://$fedsvcname:$fedsvcport/mgmt/logout;
            }

            location @logout_grafana {
                absolute_redirect off;

                # cleanup auth token
                add_header Set-Cookie "OSAuthToken=; Path=/; secure; Secure; HTTPOnly";
                return 302 /?action=logoff;
            }

            location /platform {
                default_type application/json;
                return 200 '{"value":"{{ .Values.global.platform }}"}';
            }
            
            location /features {
                return 200 '{{ .Values.features | toJson }}';
            }

            location /version {
                return 200 '{{ .Chart.AppVersion }}';
            }

            location / {
                add_header X-Frame-Options "SAMEORIGIN";
                root   /usr/share/nginx/html;
                index  index.html index.htm;
            }
        }
    }
  plugin.json: |
    {
        "manifestVersion": "1.0.0",
        "requirements": {
            "plugin.api.version": "1.0.0"
        },
        "configuration": {
            "nameKey": "plugin.name",
            "icon": {
                "name": "star"
            },
            {{- if (eq .Values.global.platform "VMware") }}
            "sso": {
                "saml": {
                    "hokSolution": {
                        "pushHook": {
                            "uri": "rest/saml-hook"
                        }
                    }
                }
            }
            {{- end}}
        },
        "objects": {
            "ClusterComputeResource": {
                "summary": {
                    "view": {
                        "uri": "index.html?view=summary",
                        "size": {
                            "widthSpan": 1,
                            "heightSpan": 2
                        }
                    }
                },
                "monitor": {
                    "views": [
                        {
                            "navigationId": "deos.monitor.health",
                            "labelKey": "cluster.monitor.list.health",
                            "uri": "index.html?view=health"
                        }
                    ]
                },
                "configure": {
                    "views": [
                        {
                            "navigationId": "deos.configure.dashboard",
                            "labelKey": "cluster.configure.list.dashboard",
                            "uri": "index.html?view=dashboard"
                        },
                        {
                            "navigationId": "deos.configure.accounts",
                            "labelKey": "cluster.configure.list.accounts",
                            "uri": "index.html?view=accounts"
                        },
                        {
                            "navigationId": "deos.configure.objectstores",
                            "labelKey": "cluster.configure.list.objectstores",
                            "uri": "index.html?view=objectstores"
                        },
                        {
                            "navigationId": "deos.configure.objectscalesystems",
                            "labelKey": "cluster.configure.list.objectscalesystems",
                            "uri": "index.html?view=objectscalesystems"
                        },
                        
                        {
                            "navigationId": "deos.configure.settings",
                            "labelKey": "cluster.configure.list.settings",
                            "uri": "index.html?view=settings"
                        }
                    ]
                }
            }
        },
        "definitions": {
            "iconSpriteSheet": {
                "uri": "assets/images/sprites.png",
                "definitions": {
                    "star": {
                        "x": 0,
                        "y": 96
                    }
                }
            },
            "i18n": {
                "locales": [
                    "en-US",
                    "de-DE",
                    "fr-FR"
                ],
                "definitions": {
                    "plugin.name": {
                        "en-US": "ObjectScaleSERVICE_ID",
                        "de-DE": "ObjectScaleSERVICE_ID",
                        "fr-FR": "ObjectScaleSERVICE_ID"
                    },
                    "cluster.monitor.list.health": {
                        "en-US": "HealthSERVICE_ID",
                        "de-DE": "GesundheitSERVICE_ID",
                        "fr-FR": "santéSERVICE_ID"
                    },
                    "cluster.configure.list.objectstores": {
                        "en-US": "Object StoresSERVICE_ID",
                        "de-DE": "Object StoresSERVICE_ID",
                        "fr-FR": "Object StoresSERVICE_ID"
                    },
                    "cluster.configure.list.settings": {
                        "en-US": "SettingsSERVICE_ID",
                        "de-DE": "SettingsSERVICE_ID",
                        "fr-FR": "SettingsSERVICE_ID"
                    },
                    "cluster.configure.list.dashboard": {
                        "en-US": "DashboardSERVICE_ID",
                        "de-DE": "DashboardSERVICE_ID",
                        "fr-FR": "DashboardSERVICE_ID"
                    },
                    "cluster.configure.list.accounts": {
                        "en-US": "AccountsSERVICE_ID",
                        "de-DE": "AccountsSERVICE_ID",
                        "fr-FR": "AccountsSERVICE_ID"
                    },
                    "cluster.configure.list.objectscalesystems": {
                        "en-US": "Objectscale SystemsSERVICE_ID",
                        "de-DE": "Objectscale SystemsSERVICE_ID",
                        "fr-FR": "Objectscale SystemsSERVICE_ID"
                    }
                }
            }
        }
    }
