---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-operator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    operator: objectscale-operator
    product: objectscale
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/component: objectscale-operator
        app.kubernetes.io/part-of: {{ .Release.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        operator: objectscale-operator
        product: objectscale
        release: {{ .Release.Name }}
{{ include "common-monitoring-lib.logging-inject-labels" . | indent 8 }}
{{ include "common-lib.labels-sp-integrated-all" . | indent 8}}
      annotations:
{{ include "common-lib.vsphere-emm-integrated_annotation" . | indent 8}}
    spec:
      serviceAccountName: objectscale-operator
{{- if .Values.global.registrySecret }}
      imagePullSecrets:
        - name: {{ .Values.global.registrySecret }}
{{- end }}
      tolerations:
{{- if eq .Values.global.platform "VMware" }}
        - key: "node.vmware.com/drain"
          operator: "Equal"
          value: "planned-downtime"
          effect: "NoExecute"
{{- end }}
      containers:
      - name: operator
        image: {{ .Values.global.registry }}/{{ .Values.image.repository }}:{{ default .Values.tag .Values.image.tag }}
{{- if .Values.image.pullPolicy }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- else }}
        imagePullPolicy: {{ .Values.pullPolicy }}
{{- end }}
        ports:
        - containerPort: 60000
          name: metrics
{{- if eq .Values.debugMode true }}
        - containerPort: 40000
          name: debug
{{- end }}
        command: ["bash"]
{{- if eq .Values.debugMode true }}
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /dlv --listen=:40000 --headless=true --api-version=2 --continue=true --accept-multiclient=true exec /usr/local/bin/objectscale-operator"]
{{- else }}
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /usr/local/bin/objectscale-operator"]
{{- end }}
        resources:
          limits:
            memory: {{ .Values.resources.operator.limits.memory }}
            ephemeral-storage: {{ .Values.resources.operator.limits.ephemeralStorage }}
          requests:
            memory: {{ .Values.resources.operator.requests.memory }}
            ephemeral-storage: {{ .Values.resources.operator.requests.ephemeralStorage }}
        volumeMounts:
{{- if eq .Values.loggerConfig.enabled true }}
        - name: logger-config
          mountPath: /etc/config
        - name: crash-dump
          mountPath: /crash-dump
{{- end }}
        - name: trusted-anchors-secret
          mountPath: "/etc/mgmt/trustedanchors"
        - name: mgmt-shared-secret
          mountPath: "/etc/mgmt/sharedsecret"
        - name: operator-bypass-config
          mountPath: "/etc/bypass_config"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PLATFORM
          value: {{ .Values.global.platform | default "Default" }}
        - name: IAM_SERVICE_NAME
          value: "objectscale-iam"
        - name: FEDERATION_SERVICE_NAME
          value: "objectscale-federation"
{{- if .Values.dcm.enabled }}
        - name: DCM_SERVICE_HOSTNAME
          value: "objectscale-dcm"
{{- end }}
{{- if .Values.logReceiver.create }}
        - name: LOG_RECEIVER_TYPE
          value: Syslog
        - name: LOG_RECEIVER_HOST
          value: objectscale-syslog.{{ .Release.Namespace }}.svc.cluster.local
        - name: LOG_RECEIVER_PROTO
          value: tcp
        - name: LOG_RECEIVER_PORT
          value: "514"
{{- else }}
  {{- if .Values.logReceiver.type }}
        - name: LOG_RECEIVER_TYPE
          value: {{ .Values.logReceiver.type }}
  {{- end }}
  {{- if .Values.logReceiver.user }}
        - name: LOG_RECEIVER_USER
          value: {{ .Values.logReceiver.user }}
  {{- end }}
  {{- if .Values.logReceiver.password }}
        - name: LOG_RECEIVER_PASSWORD
          value: {{ .Values.logReceiver.password }}
  {{- end }}
  {{- if .Values.logReceiver.host }}
        - name: LOG_RECEIVER_HOST
          value: {{ .Values.logReceiver.host }}
  {{- end }}
  {{- if .Values.logReceiver.protocol }}
        - name: LOG_RECEIVER_PROTO
          value: {{ .Values.logReceiver.protocol }}
  {{- end }}
  {{- if .Values.logReceiver.port }}
        - name: LOG_RECEIVER_PORT
          value: "{{ .Values.logReceiver.port }}"
  {{- end }}
{{- end }}
        - name: LOG_DIRECTION
                {{- if .Values.logReceiver.type }}
          value: file
                {{- else }}
          value: stdout
                {{- end }}
        - name: WATCH_NAMESPACE
{{- if eq .Values.global.watchAllNamespaces true}}
          value: ""
{{- else }}
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
{{- end }}
{{- if .Values.global.registrySecret }}
        - name: REGISTRY_SECRET
          value: {{ .Values.global.registrySecret }}
{{- end }}
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: LOG_DIRECTION
{{- if .Values.logReceiver.type }}
          value: file
{{- else }}
          value: stdout
{{- end }}
{{- if .Values.features.spOperatorEnabled }}
      - name: sp-operator
        image: {{ .Values.global.registry }}/{{ .Values.image.repository }}:{{ default .Values.tag .Values.image.tag }}
  {{- if .Values.image.pullPolicy }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
  {{- else }}
        imagePullPolicy: {{ .Values.pullPolicy }}
  {{- end }}
        ports:
        - containerPort: 8384
          name: metrics
  {{- if eq .Values.debugMode true }}
        - containerPort: 40001
          name: debug
  {{- end }}
        command: ["bash"]
  {{- if eq .Values.debugMode true }}
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /dlv --listen=:40001 --headless=true --api-version=2 --continue=true --accept-multiclient=true exec ${SP_OPERATOR}"]
  {{- else }}
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ${SP_OPERATOR}"]
  {{- end }}
        resources:
          limits:
            memory: {{ .Values.resources.operator.limits.memory }}
            ephemeral-storage: {{ .Values.resources.operator.limits.ephemeralStorage }}
          requests:
            memory: {{ .Values.resources.operator.requests.memory }}
            ephemeral-storage: {{ .Values.resources.operator.requests.ephemeralStorage }}
        volumeMounts:
        - name: service-procedures-config
          mountPath: /etc/sp-config
  {{- if .Values.loggerConfig.enabled }}
        - name: logger-config
          mountPath: /etc/config
        - name: crash-dump
          mountPath: /crash-dump
  {{- end }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: "sp-operator"
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PLATFORM
          value: {{ .Values.global.platform | default "Default" }}
  {{- if .Values.dcm.enabled }}
        - name: DCM_SERVICE_HOSTNAME
          value: "{{ .Release.Name }}-dcm"
        - name: SP_OPERATOR_ENABLED
          value: "true"
  {{- end }}
  {{- if .Values.logReceiver.create }}
        - name: LOG_RECEIVER_TYPE
          value: Syslog
        - name: LOG_RECEIVER_HOST
          value: objectscale-syslog.{{ .Release.Namespace }}.svc.cluster.local
        - name: LOG_RECEIVER_PROTO
          value: tcp
        - name: LOG_RECEIVER_PORT
          value: "514"
  {{- else }}
    {{- if .Values.logReceiver.type }}
        - name: LOG_RECEIVER_TYPE
          value: {{ .Values.logReceiver.type }}
    {{- end }}
    {{- if .Values.logReceiver.user }}
        - name: LOG_RECEIVER_USER
          value: {{ .Values.logReceiver.user }}
    {{- end }}
    {{- if .Values.logReceiver.password }}
        - name: LOG_RECEIVER_PASSWORD
          value: {{ .Values.logReceiver.password }}
    {{- end }}
      {{- if .Values.logReceiver.host }}
        - name: LOG_RECEIVER_HOST
          value: {{ .Values.logReceiver.host }}
    {{- end }}
    {{- if .Values.logReceiver.protocol }}
        - name: LOG_RECEIVER_PROTO
          value: {{ .Values.logReceiver.protocol }}
    {{- end }}
    {{- if .Values.logReceiver.port }}
        - name: LOG_RECEIVER_PORT
          value: "{{ .Values.logReceiver.port }}"
    {{- end }}
  {{- end }}
        - name: LOG_DIRECTION
  {{- if .Values.logReceiver.type }}
          value: file
  {{- else }}
          value: stdout
  {{- end }}
        - name: WATCH_NAMESPACE
  {{- if eq .Values.global.watchAllNamespaces true}}
          value: ""
  {{- else }}
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  {{- end }}
  {{- if .Values.global.registrySecret }}
        - name: REGISTRY_SECRET
          value: {{ .Values.global.registrySecret }}
  {{- end }}
        - name: OPERATOR_NAME
          value: sp-operator
        - name: LOG_DIRECTION
  {{- if .Values.logReceiver.type }}
          value: file
  {{- else }}
          value: stdout
  {{- end }}
{{- end }}
{{- if ne .Values.global.platform "VMware"}}
      {{- if or .Values.logReceiver.type .Values.logReceiver.create }}
      - name: fluentbit-agent
        image: {{ .Values.global.registry }}/{{ .Values.fluentbitAgent.image.repository }}:{{ default .Values.tag .Values.fluentbitAgent.image.tag }}
        imagePullPolicy: {{ default .Values.pullPolicy .Values.fluentbitAgent.image.pullPolicy }}
        resources:
          limits:
            memory: {{ .Values.resources.fluentbitAgent.limits.memory }}
          requests:
            memory: {{ .Values.resources.fluentbitAgent.requests.memory }}
        env:
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RELEASE_NAME
            value: {{ .Release.Name }}
          - name: IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        volumeMounts:
          - name: log
            readOnly: true
            mountPath: /var/log
          - name: config
            mountPath: /fluent-bit/etc
      {{- end }}
{{- end }}
      volumes:
        - name: service-procedures-config
          configMap:
            name: objectscale-service-procedures-config
        - name: operator-bypass-config
          configMap:
            name: objectscale-manager-bypass-config
# Because volumes config was created if platform is not VMware and logReceiver is active it's needed to add this
# checking here to save previous logic
{{- if or (eq .Values.loggerConfig.enabled true) (and (ne .Values.global.platform "VMware") (or .Values.logReceiver.type .Values.logReceiver.create)) }}
        {{- if and (ne .Values.global.platform "VMware") (or .Values.logReceiver.type .Values.logReceiver.create) }}
        - name: log
          emptyDir: {}
        - name: config
          configMap:
            name: {{ .Release.Name }}-manager-logs-config
        {{- end }}
        {{- if eq .Values.loggerConfig.enabled true }}
        - name: logger-config
          configMap:
            name: logger-config
        {{- end }}
        - name: crash-dump
          emptyDir: {}
{{- end }}
        - name: trusted-anchors-secret
          secret:
            secretName: objectscale-federation-trusted-anchors
        - name: mgmt-shared-secret
          secret:
            secretName: mgmt-servicelogin-shared-secret
